class update_dbw_mkz_msgs_ThrottleInfoReport_8255d20d2bbc661ad39074024259c71a(MessageUpdateRule):
	old_type = "dbw_mkz_msgs/ThrottleInfoReport"
	old_full_text = """
Header header

# Throttle Pedal
float32 throttle_pc   # Throttle pedal percent, range 0 to 1
float32 throttle_rate # Throttle pedal change per second (1/s)

# Engine
float32 engine_rpm    # Engine Speed (rpm)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""

	new_type = "dbw_mkz_msgs/ThrottleInfoReport"
	new_full_text = """
Header header

# Throttle Pedal
float32 throttle_pc   # Throttle pedal percent, range 0 to 1
float32 throttle_rate # Throttle pedal change per second (1/s)
QualityFactor throttle_pedal_qf # Non-zero is limp-home

# Engine
float32 engine_rpm    # Engine Speed (rpm)

# Gear Num
GearNum gear_num      # Gear Number

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: dbw_mkz_msgs/QualityFactor
uint8 value

uint8 OK=0
uint8 EMPTY=1
uint8 CORRUPT=2
uint8 FAULT=3

================================================================================
MSG: dbw_mkz_msgs/GearNum
uint8 num

uint8 NONE=0
uint8 DRIVE_D01=1
uint8 DRIVE_D02=2
uint8 DRIVE_D03=3
uint8 DRIVE_D04=4
uint8 DRIVE_D05=5
uint8 DRIVE_D06=6
uint8 DRIVE_D07=7
uint8 DRIVE_D08=8
uint8 DRIVE_D09=9
uint8 DRIVE_D10=10
uint8 NEUTRAL=16
uint8 REVERSE_R01=17
uint8 REVERSE_R02=18
uint8 PARK=31
"""

	order = 8
	migrated_types = [
		("Header","Header"),]

	valid = True

	def update(self, old_msg, new_msg):
		self.migrate(old_msg.header, new_msg.header)
		new_msg.throttle_pc = old_msg.throttle_pc
		new_msg.throttle_rate = old_msg.throttle_rate
		new_msg.throttle_pedal_qf = self.get_new_class('dbw_mkz_msgs/QualityFactor')()
		new_msg.engine_rpm = old_msg.engine_rpm
		new_msg.gear_num = self.get_new_class('dbw_mkz_msgs/GearNum')()
